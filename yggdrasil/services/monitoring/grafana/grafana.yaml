grafana:
  revisionHistoryLimit: 2
  grafana.ini:
    server:
      #TODO HOST URL
      root_url: https://{{ .Values.ingress.hosts.main.host }}/grafana
    auth.azuread:
      name: Azure AD
      enabled: true
      allow_sign_up: true
      client_id: APPLICATION_ID
      client_secret: CLIENT_SECRET
      scopes: openid email profile offline_access
      auth_url: https://login.microsoftonline.com/f7619355-6c67-4100-9a78-1847f30742e2/oauth2/v2.0/authorize
      token_url: https://login.microsoftonline.com/f7619355-6c67-4100-9a78-1847f30742e2/oauth2/v2.0/token
      allowed_domains:
      allowed_groups:

    auth:
      disable_login_form: true
      oauth_auto_login: true

  envFromSecret: "grafana-sso"

  # persistence:
  #   type: pvc
  #   enabled: true
  #   # storageClassName: default
  #   accessModes:
  #     - ReadWriteOnce
  #   size: 25Gi
  #   # annotations: {}
  #   finalizers:
  #     - kubernetes.io/pvc-protection
  #   # selectorLabels: {}
  #   # subPath: ""
  #   # existingClaim:

  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Thanos
          type: prometheus
          url: http://thanos-query-http.monitoring:10902
          access: proxy
          isDefault: true
          jsonData:
            timeInterval: '1m'
        - name: Loki
          type: loki
          url: http://loki-loki-stack.monitoring:3100
          access: proxy
          isDefault: false
          jsonData:
            timeInterval: '1m'
        # - name: Loki-prod
        #   type: loki
        #   url: https://dp-prod.westeurope.cloudapp.azure.com/loki
        #   access: proxy
        #   isDefault: false
        #   jsonData:
        #     timeInterval: '1m'

  sidecar:
    dashboards:
      enabled: true
      labelValue: "true"
      defaultFolderName: prod

janus:
  enabled: true
  host: {{ .Values.ingress.hosts.main.host | quote }}
  certmanagerIssuer:
    name: {{ .Values.ingress.certmanagerissuer | quote }}
    kind: ClusterIssuer

  ingressRoutes:
    - name: grafana
      entryPoints:
        - websecure
      routes:
      - kind: Rule
        match: PathPrefix(`/grafana`)
        services:
          - name: grafana
            port: 80
        middlewares:
          - name: grafana-stripprefix
          - name: grafana-headers
      certificate:
        enabled: true

  middlewares:
    - name: grafana-stripprefix
      spec:
        stripPrefix:
          prefixes:
            - /grafana
    - name: grafana-headers
      spec:
        headers:
          accessControlAllowOriginList:
            - "*"
          accessControlAllowHeaders:
            - 'x-grafana-nocache'
            - 'x-grafana-org-id'
lethe:
  enabled: true
  secretStores:
    - name: k8s-secret-backend
      providers:
        vault:
          server: "http://vault.tooling.svc:8200"
          path: "k8s"
          version: "v2"
          auth:
            # Authenticate against Vault using a Kubernetes ServiceAccount
            # token stored in a Secret.
            # https://www.vaultproject.io/docs/auth/kubernetes
            kubernetes:
              # Path where the Kubernetes authentication backend is mounted in Vault
              mountPath: "kubernetes"
              # A required field containing the Vault Role to assume.
              role: "k8s-secrets"

  secrets:
    - name: grafana-sso
      secretStore:
        backend: k8s-secret-backend
        kind: SecretStore
      target:
        name: grafana-sso
      data:
        - secretKey: GF_AUTH_AZUREAD_CLIENT_ID
          remoteRef:
            key: secrets/sso
            property: clientid
        - secretKey: GF_AUTH_AZUREAD_CLIENT_SECRET
          remoteRef:
            key: secrets/sso
            property: clientsecret